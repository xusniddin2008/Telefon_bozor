from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from data.config import ADMINS, CHANNELS
from keyboards.inline.phonesInlineKeyboardRu import newSecondMenuRu, statePhoneMenuRu, boxPassPhoneMenuRu, exchangePhoneMenuRu, lookMenuRu, userConfirmationMenuRu, newAdsMenuRu, writeFormsMenuRu
from keyboards.inline.callback_dataRu import new_second_callback, state_phone_callback, box_pass_callback, exchange_callback, look_callback, user_confirmation_callback, new_ads_callback, write_forms_callback
from states.personalDataRu import PersonalDataRu

from loader import dp, bot

#################################################################################################################################
@dp.message_handler(text = "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫")
async def uz_language(message: Message, state: FSMContext):    
    for x in range(1, 11):
        try:                
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-x)
            await message.delete()
        except:
            pass    
    #await bot.send_video(message.chat.id, 'BAACAgIAAxkBAAK3HmMebiyIj_SlZaOs-VQtJ0FOlssmAALMHAACeRz5SNPAuItUxJ8JKQQ', caption="sassassasasasas")
    await message.answer(f"<b>–í –∫–∞–∫–æ–º –≤–∏–¥–µ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?</b>", reply_markup = writeFormsMenuRu)
    await PersonalDataRu.writeForms.set()
#################################################################################################################################
@dp.callback_query_handler(write_forms_callback.filter(), state=PersonalDataRu.writeForms)
async def new_second(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.delete()
    if callback_data["item_name"] == "write":
        await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ</b>")
        await call.message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>üì±–ù–∞–∑–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : Xiaomi Poco F3\nüíæ–ü–∞–º—è—Ç—å : 128/6 –ì–ë\nüìÜ–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è : –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è 2 –≥–æ–¥–∞\n‚öôÔ∏è–°–æ—Å—Ç–æ—è–Ω–∏—è : –ò–¥–µ–∞–ª\n‚õîÔ∏è–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ : –ù–µ—Ç\nüåà–¶–≤–µ—Ç : black\nüì¶üìÑ–ö–æ—Ä–æ–±–∫–∞, –î–æ–∫—É–º–µ–Ω—Ç : –ù–µ—Ç, –î–∞—é –∫–æ–ø–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞\nüéÅ–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã : AirPods 2\n‚ôªÔ∏è–û–±–º–µ–Ω : –ù–µ—Ç\nüí∞–¶–µ–Ω–∞ : 280$\nüìû–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ : +998990000000</b>")
        await PersonalDataRu.writePost.set()
    elif callback_data["item_name"] == "forms":
        await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ</b>", reply_markup = ReplyKeyboardRemove())
        await call.message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>iPhone 13 Pro Max\n\n–ò–ª–∏\n\nXiaomi Poco F3</b>")
        await call.answer(cache_time = 60)
        await PersonalDataRu.modelName.set()
    elif callback_data["item_name"] == "deletePost":
        await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å –∫–∞–Ω–∞–ª–∞</b>")        
        await PersonalDataRu.deletePost.set()
    await call.answer(cache_time = 60)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.writeForms)
async def post_unknown(message: Message, state: FSMContext):    
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        try:                
            await message.delete()    
            await bot.delete_message(message.from_user.id, message.message_id-1)
            await bot.delete_message(message.from_user.id, message.message_id-2)
        except:
            pass    
        await message.answer(f"<b>–í –∫–∞–∫–æ–º –≤–∏–¥–µ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?</b>", reply_markup = writeFormsMenuRu)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.writePost)
async def answer_modelName(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        msg = f"{message.text}"
        await state.update_data(msg = msg)
        await state.update_data(number = 0)
        await state.update_data(photoIds = {})
        await state.update_data(videoId = 0)
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await state.reset_state(with_data=False)
        await message.answer(f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 9 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ 1 –í–∏–¥–µ–æ (–≤–∏–¥–µ–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>")
        await PersonalDataRu.photoVideo.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.modelName)
async def answer_modelName(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        modelName = f"üì±–ù–∞–∑–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : {message.text}\n"  
        await state.update_data(msg = modelName)
        await state.update_data(number = 0)
        await state.update_data(photoIds = {})
        await state.update_data(videoId = 0)
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞–º—è—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ</b>")
        await message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>32/3\n\n–ò–ª–∏\n\n128</b>")
        await PersonalDataRu.memoryRam.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.memoryRam)
async def answer_memoryRam(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
        await bot.delete_message(message.from_user.id, message.message_id-3)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        memoryRam = f"üíæ–ü–∞–º—è—Ç : {message.text} –ì–ë\n"
        await state.update_data(msg = msg + memoryRam)        
        data = await state.get_data()
        msg = data.get("msg")    
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await state.reset_state(with_data=False)
        await state.update_data(step = "stepNewSecond")
        await message.answer(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup = newSecondMenuRu)
        await PersonalDataRu.newSecond.set()
#################################################################################################################################
@dp.callback_query_handler(new_second_callback.filter(), state=PersonalDataRu.newSecond)
async def new_second(call: CallbackQuery, callback_data: dict, state: FSMContext):
    try:
        await call.message.delete()
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-1)
    except:
        pass
    if callback_data["item_name"] == "newPhone":
        data = await state.get_data()
        msg = data.get("msg")
        newSecond = f"üìÜ–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è : –ù–æ–≤–∏–π\n"
        await state.update_data(msg = msg + newSecond)
        data = await state.get_data()
        msg = data.get("msg")                
        await call.message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")    
        await call.message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")
        await state.update_data(step = "stepPhoneColor")
        await PersonalDataRu.phoneColor.set()
    elif callback_data["item_name"] == "secondHand":
        await state.update_data({"newSecond": "–ë—ã–≤—à–∏–π –≤ –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏"})
        await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ</b>")
        await call.message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>1.5 –º–µ—Å—è—Ü\n\n–ò–ª–∏\n\n2 –≥–æ–¥</b>")
        await state.update_data(step = "stepPhoneWorkingTime")
        await PersonalDataRu.phoneWorkingTime.set()    
    await call.answer(cache_time = 60)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.newSecond)
async def post_unknown(message: Message, state: FSMContext):    
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:     
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup = newSecondMenuRu)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.phoneWorkingTime)
async def answer_phoneWorkingTime(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")    
        newSecond = f"üìÜ–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è : {message.text}\n"        
        await state.update_data(msg = msg + newSecond)
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await state.update_data(step = "stepStatePhone")
        await state.reset_state(with_data=False)
        await message.answer(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup = statePhoneMenuRu)
        await PersonalDataRu.statePhone.set()
#################################################################################################################################
@dp.callback_query_handler(state_phone_callback.filter(), state=PersonalDataRu.statePhone)
async def state_phone(call: CallbackQuery, callback_data: dict, state: FSMContext):
    try:                
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-1)
    except:
        pass
    statePhone = callback_data["item_name"]
    data = await state.get_data()
    msg = data.get("msg")    
    statePhone = f"‚öôÔ∏è–°–æ—Å—Ç–æ—è–Ω–∏—è : {statePhone}\n"        
    await state.update_data(msg = msg + statePhone)
    data = await state.get_data()
    msg = data.get("msg")
    await call.message.delete() 
    await call.message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
    await call.message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")
    await call.message.answer("–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>–ï—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ü–∞—Ä–∞–ø–∏–Ω–∞\n\n–°–ª–æ–º–∞–Ω –∑–∞–¥–Ω–∏–π –∫—Ä—ã—à–∫–∞\n\n–¢–µ–ª–µ—Ñ–æ–Ω —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª—Å—è, –æ—á–∏–ª–≥–∞–Ω\n\n–ù–∏–∫–∞–∫–∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ—Ç</b>")
    await PersonalDataRu.phoneProblem.set()    
    await call.answer(cache_time = 60)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.statePhone)
async def post_unknown(message: Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup = statePhoneMenuRu)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.phoneProblem)
async def answer_phoneProblem(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
        await bot.delete_message(message.from_user.id, message.message_id-3)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        phoneProblem = f"‚õîÔ∏è–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ : {message.text}\n"        
        await state.update_data(msg = msg + phoneProblem)
        data = await state.get_data()
        msg = data.get("msg")   
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>")
        await state.update_data(step = "stepPhoneColor")
        await PersonalDataRu.phoneColor.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.phoneColor)
async def answer_phoneColor(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        phoneColor = f"üåà–¶–≤–µ—Ç : {message.text}\n"        
        await state.update_data(msg = msg + phoneColor)
        data = await state.get_data()
        msg = data.get("msg") 
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await state.update_data(step = "stepBoxPass")
        await state.reset_state(with_data=False)
        await message.answer(f"<b>–ö–æ—Ä–æ–±–∫–∞, –î–æ–∫—É–º–µ–Ω—Ç –µ—Å—Ç—å?</b>", reply_markup = boxPassPhoneMenuRu)
        await PersonalDataRu.boxPass.set()
#################################################################################################################################
@dp.callback_query_handler(box_pass_callback.filter(), state=PersonalDataRu.boxPass)
async def box_pass(call: CallbackQuery, callback_data: dict, state: FSMContext):
    try:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-1)
    except:
        pass
    data = await state.get_data()
    msg = data.get("msg")
    boxPass = callback_data["item_name"]
    boxPass = f"üì¶üìÑ–ö–æ—Ä–æ–±–∫–∞, –î–æ–∫—É–º–µ–Ω—Ç : {boxPass}\n"        
    await state.update_data(msg = msg + boxPass)
    data = await state.get_data()
    msg = data.get("msg")
    await call.message.delete() 
    await call.message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
    await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ</b>")
    await call.message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>–ù–∞—É—à–Ω–∏–∫, –ó–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, Airpods, Bluetooth –Ω–∞—É—à–Ω–∏–∫ lenovo lp40\n\nYo`q</b>")    
    await state.update_data(step = "stepAccessories")
    await PersonalDataRu.accessories.set()    
    await call.answer(cache_time = 60)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.boxPass)
async def post_unknown(message: Message, state: FSMContext):    
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:   
        await message.answer(f"<b>–ö–æ—Ä–æ–±–∫–∞, –î–æ–∫—É–º–µ–Ω—Ç –µ—Å—Ç—å?</b>", reply_markup = boxPassPhoneMenuRu)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.accessories)
async def answer_accessories(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
        await bot.delete_message(message.from_user.id, message.message_id-3)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        accessories = f"üéÅ–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã : {message.text}\n"        
        await state.update_data(msg = msg + accessories)
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await state.update_data(step = "stepExchange1")
        await state.reset_state(with_data=False)
        await message.answer(f"<b>–û–±–º–µ–Ω –µ—Å—Ç—å?</b>", reply_markup = exchangePhoneMenuRu)
        await PersonalDataRu.exchange_callback.set()
#################################################################################################################################
@dp.callback_query_handler(exchange_callback.filter(), state=PersonalDataRu.exchange_callback)
async def exchange(call: CallbackQuery, callback_data: dict, state: FSMContext):
    try:
        await call.message.delete()    
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-1)
    except:
        pass
    if callback_data["item_name"] == "no":
        data = await state.get_data()
        msg = data.get("msg")
        exchange = f"‚ôªÔ∏è–û–±–º–µ–Ω : –ù–µ—Ç\n"
        await state.update_data(msg = msg + exchange)
        data = await state.get_data()
        msg = data.get("msg")                
        await call.message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")    
        await call.message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>")
        await call.message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>üîã–ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏ : 85%\n\n–ò–ª–∏\n\n–ü—Ä–æ–¥–∞—é –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏</b>")
        await PersonalDataRu.addInfo.set()
    elif callback_data["item_name"] == "yes":
        await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–±–º–µ–Ω–∞</b>")
        await call.message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>–û–±–º–µ–Ω—è—é –Ω–∞ iPhone 13 Pro Max\n\n–ò–ª–∏\n\n–û–±–º–µ–Ω—è—é –Ω–∞ iPhone 13 Pro Max —Å –º–æ–µ–π –¥–æ–ø–ª–∞—Ç–æ–π</b>")
        await state.update_data(step = "stepExchange2")
        await PersonalDataRu.exchange.set()    
    await call.answer(cache_time = 60)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.exchange_callback)
async def post_unknown(message: Message, state: FSMContext):    
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:   
        await message.answer(f"<b>–û–±–º–µ–Ω –µ—Å—Ç—å?</b>", reply_markup = exchangePhoneMenuRu)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.exchange)
async def answer_exchange(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        exchange = f"‚ôªÔ∏è–û–±–º–µ–Ω : {message.text}\n"        
        await state.update_data(msg = msg + exchange)    
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")    
        await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>")
        await message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>üîã–ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏ : 85%\n\n–ò–ª–∏\n\n–ü—Ä–æ–¥–∞—é –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏</b>")   
        await PersonalDataRu.addInfo.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.addInfo)
async def answer_addInfo(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
        await bot.delete_message(message.from_user.id, message.message_id-3)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        addInfo = f"{message.text}\n"        
        await state.update_data(msg = msg + addInfo)
        await state.update_data(step = "stepAddInfo")
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É</b>")
        await message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>500$\n\n–ò–ª–∏\n\n3500000 –°—É–º</b>")
        await PersonalDataRu.price.set()    
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.price)
async def answer_price(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
        await bot.delete_message(message.from_user.id, message.message_id-3)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        price = f"\nüí∞–ù–∞—Ä—Ö–∏ : {message.text}\n"        
        await state.update_data(msg = msg + price)
        await state.update_data(step = "stepPrice")
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ—Ñ–∏–ª—å) –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ</b>")
        await message.answer(f"–ù–∞ –ø—Ä–∏–º–µ—Ä\n\n<b>+998990000000\n\n–ò–ª–∏\n\n@TelefonBozorii_uzAdmin\n\n–ò–ª–∏ –æ–±–∞ —Å—Ä–∞–∑—É\n\n+998990000000, @TelefonBozorii_uzAdmin</b>")
        await PersonalDataRu.phoneNumber.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.phoneNumber)
async def answer_phoneNumber(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
        await bot.delete_message(message.from_user.id, message.message_id-2)
        await bot.delete_message(message.from_user.id, message.message_id-3)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        data = await state.get_data()
        msg = data.get("msg")
        phoneNumber = f"üìû–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ : <i>{message.text}</i>\n"        
        await state.update_data(msg = msg + phoneNumber)
        await state.update_data(step = "stepPhoneNumber")
        data = await state.get_data()
        msg = data.get("msg")
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n<b>{msg}</b>")
        await state.reset_state(with_data=False)
        await message.answer(f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 9 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ 1 –í–∏–¥–µ–æ (–≤–∏–¥–µ–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>")
        await PersonalDataRu.photoVideo.set()
#################################################################################################################################
@dp.message_handler(content_types=types.ContentType.PHOTO, state=PersonalDataRu.photoVideo)
async def get_file_id_p(message: types.Message, state: FSMContext):
    '''for x in range(1, 11):
        try:                
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-x)
        except:
            pass'''
    photoId = message.photo[-1].file_id
    data = await state.get_data()
    number = int(data.get("number"))     
    photoIds = data.get("photoIds")
    number = number + 1
    if number <= 9:
        await state.update_data(number = number)
        photoIds.update({f"photoId{number}": photoId})        
        await state.update_data(photoIds = photoIds)
        if number == 1:
            try:
                await bot.send_message(ADMINS[0], f"<b>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</b>")
                await dp.bot.forward_message(ADMINS[0], message.chat.id, message.message_id)
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-2)
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-3)
            except:
                pass
            await message.answer(f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–æ</b>", reply_markup = lookMenuRu)
        if number != 1:
            try:
                await bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message_id-1, text=f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–æ</b>", reply_markup = lookMenuRu)
            except:
                pass
    else:
        await message.answer(f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 9—Ç–∏!</b>")
    await message.delete()    
#################################################################################################################################
@dp.message_handler(content_types=types.ContentType.VIDEO, state=PersonalDataRu.photoVideo)
async def get_file_id_v(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer(f"<b>–í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ</b>")    
    idVideo = message.video.file_id
    await state.update_data(videoId = idVideo)
#################################################################################################################################
@dp.callback_query_handler(look_callback.filter(), state=PersonalDataRu.photoVideo)
async def look(call: CallbackQuery, callback_data: dict, state: FSMContext):
    for x in range(0, 11):
        try:                
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-x)
        except:
            pass
    try:
        with open('./elonID1.txt') as fayl:
            elonID = int(fayl.read())
            elonID = elonID + 1        
        if elonID > 0:
            with open('./elonID2.txt') as fayl:
                elonID = int(fayl.read())
                elonID = elonID + 1        
        with open('./elonID1.txt','w') as fayl:
            fayl.write(f"{elonID}")        
        with open('./elonID2.txt','w') as fayl:
            fayl.write(f"{elonID}")
    except:
        with open('./elonID2.txt') as fayl:
            elonID = int(fayl.read())
            elonID = elonID + 1
        with open('./elonID1.txt','w') as fayl:
            fayl.write(f"{elonID}")        
        with open('./elonID2.txt','w') as fayl:
            fayl.write(f"{elonID}")
    try:
        await call.message.delete()
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-1)
    except:
        pass
    data = await state.get_data()
    msg = data.get("msg")
    photoIds = data.get("photoIds")
    videoId = data.get("videoId")
    album = types.MediaGroup()
    for item, photoId in photoIds.items():
        if item == "photoId1":            
            album.attach_photo(photo=photoId, caption=f"<b>{msg}</b>\n\nElonID: {elonID}")
        else:
            album.attach_photo(photo=photoId)
    if videoId != 0:
        album.attach_video(video=videoId)
    await state.update_data(media = album)
    await call.message.answer_media_group(media=album)
    await call.message.answer(f"<b>_______________________________________</b>", reply_markup = userConfirmationMenuRu)
    await call.answer(cache_time = 60)
    await PersonalDataRu.finished.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.photoVideo)
async def post_unknown(message: Message, state: FSMContext):    
    try:                
        await message.delete()
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
#################################################################################################################################
@dp.callback_query_handler(user_confirmation_callback.filter(), state=PersonalDataRu.finished)
async def finished(call: CallbackQuery, callback_data: dict, state: FSMContext):
    if callback_data["item_name"] == "post":
        data = await state.get_data()
        album = data.get("media")
        await call.message.edit_reply_markup()
        await call.answer("–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", show_alert=True)
        data = await state.get_data()
        album = data.get("media")
        await dp.bot.send_media_group(ADMINS[0], media=album)
        await bot.send_message(ADMINS[0], f"First name: {call.message.chat.first_name}\nUser name: @{call.message.chat.username}\nUser ID: {call.message.chat.id}\n–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–µ–ø–∞–¥–∞–≥–∏ –ø–æ—Å—Ç–Ω–∏ —á–æ–ø —ç—Ç–º–æ“õ—á–∏:")
        await bot.send_message(ADMINS[0], f"<b>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</b>")
        await call.message.answer(f"<b>–ü–æ–¥–∞—Ç—å –Ω–æ–≤–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>", reply_markup = newAdsMenuRu)
    elif callback_data["item_name"] == "cancel":
        await call.message.delete()
        try:
            for x in range(1, 11):                
                await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-x)
        except:
            pass
        await call.message.answer(f"–ü–æ–¥–∞—Ç—å –Ω–æ–≤–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup = newAdsMenuRu)
    await call.answer(cache_time = 60)
    await PersonalDataRu.new_ads.set()
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.finished)
async def post_unknown(message: Message, state: FSMContext):    
    try:                
        await message.delete()
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False) 
#################################################################################################################################
@dp.callback_query_handler(new_ads_callback.filter(), state=PersonalDataRu.new_ads)
async def new_ads(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.delete()
    if callback_data["item_name"] == "newAds":
        await call.message.answer(f"<b>_______________________________________</b>")
        await call.message.answer(f"<b>–í –∫–∞–∫–æ–º –≤–∏–¥–µ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?</b>", reply_markup = writeFormsMenuRu)
        await PersonalDataRu.writeForms.set()
    elif callback_data["item_name"] == "deletePost":
        await call.message.answer(f"<b>–ù–∞–ø–∏—à–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å –∫–∞–Ω–∞–ª–∞</b>")        
        await PersonalDataRu.deletePost.set()
    await call.answer(cache_time = 60)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.new_ads)
async def post_unknown(message: Message, state: FSMContext):    
    try:                
        await message.delete()
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
#################################################################################################################################
@dp.message_handler(state=PersonalDataRu.deletePost)
async def answer_modelName(message: types.Message, state: FSMContext):
    try:                
        await message.delete()    
        await bot.delete_message(message.from_user.id, message.message_id-1)
    except:
        pass
    if f"{message.text}" == "/start":
        await state.reset_state(with_data=False)
    else:
        await bot.send_message(ADMINS[0], f"First name: {message.chat.first_name}\nUser name: @{message.chat.username}\nUser ID: {message.chat.id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –Ω–æ–º–µ—Ä {message.text} —Å –∫–∞–Ω–∞–ª–∞")
        await message.answer(f"–ê–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ElonID: {message.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å –∫–∞–Ω–∞–ª–∞")
        await state.reset_state(with_data=False)
        await message.answer(f"<b>–ü–æ–¥–∞—Ç—å –Ω–æ–≤–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>", reply_markup = newAdsMenuRu)
        await PersonalDataRu.new_ads.set()
#################################################################################################################################